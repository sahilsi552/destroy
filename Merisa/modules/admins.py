import asyncio
from contextlib import suppress
from config import SUDOERS
from pyrogram import filters
from pyrogram.errors import ChatWriteForbidden, ChatAdminRequired
from pyrogram.types import (
    ChatPermissions,
    ChatPrivileges,
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)
from Merisa import QuantamBot as app
from ..utils import *
from Merisa.utils.database import *
from Merisa.database import *

__MODULE__ = "A·¥Ö·¥ç…™…¥s"
__HELP__ = """
Admin

Description :
This module contains commands to manage admins and their permissions in the group.
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


‡πè /ban -  ô·¥Ä…¥ ·¥Ä ·¥ús·¥á Ä
‡πè /dban -  ô·¥Ä…¥ ·¥Ä…¥·¥Ö ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥õ ú·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á
‡πè /tban -  ô·¥Ä…¥ ·¥Ä ·¥ús·¥á Ä “ì·¥è Ä s·¥ò·¥á·¥Ñ…™“ì…™·¥Ñ ·¥õ…™·¥ç·¥á
‡πè /unban - ·¥ú…¥ ô·¥Ä…¥ ·¥Ä ·¥ús·¥á Ä
‡πè /setting - ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è s·¥á·¥õ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás ·¥° ú…™·¥Ñ ú ·¥°…™ ü ü ·¥°·¥è Ä·¥ã …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò
‡πè /warn - ·¥°·¥Ä Ä…¥ ·¥Ä ·¥ús·¥á Ä
‡πè /dwarn - ·¥°·¥Ä Ä…¥ ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥õ ú·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á
‡πè /rmwarns -  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ü ü ·¥°·¥Ä Ä…¥…™…¥…¢ ·¥è“ì ·¥Ä ·¥ús·¥á Ä
‡πè /warns - s ú·¥è·¥° ·¥°·¥Ä Ä…¥…™…¥…¢ ·¥è“ì ·¥Ä ·¥ús·¥á Ä
‡πè /kick - ·¥ã…™·¥Ñ·¥ã ·¥Ä ·¥ús·¥á Ä
‡πè /dkick - ·¥ã…™·¥Ñ·¥ã ·¥Ä…¥·¥Ö ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥õ ú·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á
‡πè /purge - ·¥ò·¥ú Ä…¢·¥á ·¥ç·¥áss·¥Ä…¢·¥ás
‡πè /purge [n] - ·¥ò·¥ú Ä…¢·¥á "n" …¥·¥ú·¥ç ô·¥á Ä ·¥è“ì ·¥ç·¥áss·¥Ä…¢·¥ás “ì Ä·¥è·¥ç  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á
‡πè /del - ·¥Ö·¥á ü·¥á·¥õ·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á
‡πè /promote - ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥Ä ·¥ç·¥á·¥ç ô·¥á Ä
‡πè /fullpromote - ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥Ä ·¥ç·¥á·¥ç ô·¥á Ä ·¥°…™·¥õ ú ·¥Ä ü ü  Ä…™…¢ ú·¥õs
‡πè /demote - ·¥Ö·¥á·¥ç·¥è·¥õ·¥á ·¥Ä ·¥ç·¥á·¥ç ô·¥á Ä
‡πè /pin - ·¥ò…™…¥ ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á
‡πè /mute - ·¥ç·¥ú·¥õ·¥á ·¥Ä ·¥ús·¥á Ä
‡πè /tmute - ·¥ç·¥ú·¥õ·¥á ·¥Ä ·¥ús·¥á Ä “ì·¥è Ä s·¥ò·¥á·¥Ñ…™“ì…™·¥Ñ ·¥õ…™·¥ç·¥á
‡πè /unmute - ·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥Ä ·¥ús·¥á Ä
‡πè /ban_ghosts -  ô·¥Ä…¥ ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs
"""


@app.on_message(filters.command("purge") & ~filters.private)
@adminsOnly("can_delete_messages")
async def purgeFunc(_, message: Message):
    try:
        repliedmsg = message.reply_to_message
        try:
            await message.delete()
        except:
            pass
        if not repliedmsg:
            return await message.reply_text(" Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ò·¥ú Ä…¢·¥á “ì Ä·¥è·¥ç !")
        cmd = message.command
        if len(cmd) > 1 and cmd[1].isdigit():
            purge_to = repliedmsg.id + int(cmd[1])
            if purge_to > message.id:
                purge_to = message.id
        else:
            purge_to = message.id
        chat_id = message.chat.id
        message_ids = []
        for message_id in range(repliedmsg.id, purge_to):
            message_ids.append(message_id)
            if len(message_ids) == 500:
                await app.delete_messages(
                    chat_id=chat_id,
                    message_ids=message_ids,
                    revoke=True,  # For both sides
                )
                message_ids = []

        if len(message_ids) > 0:
            await app.delete_messages(
                chat_id=chat_id,
                message_ids=message_ids,
                revoke=True,
            )
    except AttributeError:
        pass
    except ChatWriteForbidden:
        pass
    except ChatAdminRequired:
        await message.reply_text(
            "…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !\n\n**·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥** :\n`can_delete_messages`"
        )


@app.on_message(filters.command(["kick", "dkick"]) & ~filters.private)
@adminsOnly("can_restrict_members")
async def kickFunc(_, message: Message):
    try:
        await message.delete()
    except:
        pass
    try:
        user_id, reason = await extract_user_and_reason(message)
        if not user_id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä !")
        if user_id == app.id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ã…™·¥Ñ·¥ã ·¥ç ès·¥á ü“ì !")
        if user_id in SUDOERS:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ã…™·¥Ñ·¥ã ·¥ç è ·¥è·¥°…¥·¥á Ä !")
        if user_id in (await list_admins(message.chat.id)):
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ã…™·¥Ñ·¥ã ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ !")
        mention = (await app.get_users(user_id)).mention
        msg = f"""
**·¥ã…™·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Ä:** {mention}
**·¥ã…™·¥Ñ·¥ã·¥á·¥Ö  ô è:** {message.from_user.mention if message.from_user else '·¥Ä…¥·¥è…¥'}
** Ä·¥á·¥Äs·¥è…¥:** {reason or '…¥·¥è  Ä·¥á·¥Äs·¥è…¥ ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö'}
"""
        if message.command[0][0] == "d":
            await message.reply_to_message.delete()
        await message.chat.ban_member(user_id)
        await message.reply("ü™¶")
        await message.reply_text(msg)
        await asyncio.sleep(1)
        await message.chat.unban_member(user_id)
    except AttributeError:
        pass
    except ChatWriteForbidden:
        pass
    except ChatAdminRequired:
        await message.reply_text(
            "…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !\n\n**·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥** : `can_restrict_members`"
        )


@app.on_message(filters.command(["ban", "dban", "tban"]) & ~filters.private)
@adminsOnly("can_restrict_members")
async def banFunc(_, message: Message):
    try:
        await message.delete()
    except:
        pass
    try:
        user_id, reason = await extract_user_and_reason(message, sender_chat=True)
        if not user_id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä !")
        if user_id == app.id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ  ô·¥Ä…¥ ·¥ç ès·¥á ü“ì !")
        if user_id in SUDOERS:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ã…™·¥Ñ·¥ã ·¥ç è ·¥è·¥°…¥·¥á Ä !")
        if user_id in (await list_admins(message.chat.id)):
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ  ô·¥Ä…¥ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ !")
        try:
            mention = (await app.get_users(user_id)).mention
        except IndexError:
            mention = (
                message.reply_to_message.sender_chat.title
                if message.reply_to_message
                else "·¥Ä…¥·¥è…¥"
            )
        msg = (
            f"** ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä:** {mention}\n"
            f"** ô·¥Ä…¥…¥·¥á·¥Ö  ô è:** {message.from_user.mention if message.from_user else '·¥Ä…¥·¥è…¥'}\n"
        )
        if message.command[0][0] == "d":
            await message.reply_to_message.delete()
        if message.command[0] == "tban":
            split = reason.split(None, 1)
            time_value = split[0]
            temp_reason = split[1] if len(split) > 1 else ""
            temp_ban = await time_converter(message, time_value)
            msg += f"** ô·¥Ä…¥…¥·¥á·¥Ö “ì·¥è Ä:** {time_value}\n"
            if temp_reason:
                msg += f"** Ä·¥á·¥Äs·¥è…¥:** {temp_reason}"
            with suppress(AttributeError):
                if len(time_value[:-1]) < 3:
                    await message.chat.ban_member(user_id, until_date=temp_ban)
                    await message.reply_text(msg)
                else:
                    await message.reply_text(" èou ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥ç·¥è Ä·¥á ·¥õ ú·¥Ä…¥ 99 !")
            return
        if reason:
            msg += f"** Ä·¥á·¥Äs·¥è…¥:** {reason}"
        await message.chat.ban_member(user_id)
        await message.reply_animation("ü™¶")
        await message.reply_text(msg)
    except AttributeError:
        pass
    except ChatWriteForbidden:
        pass
    except ChatAdminRequired:
        await message.reply_text(
            "…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !\n\n**·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥** : `can_restrict_members`"
        )


@app.on_message(filters.command("unban") & ~filters.private)
@adminsOnly("can_restrict_members")
async def unban_func(_, message: Message):
    try:
        await message.delete()
    except:
        pass
    try:
        reply = message.reply_to_message
        if reply and reply.sender_chat and reply.sender_chat != message.chat.id:
            return await message.reply_text(" è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ú…¥ ô·¥Ä…¥ ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü !")
        if len(message.command) == 2:
            user = message.text.split(None, 1)[1]
        elif len(message.command) == 1 and reply:
            user = message.reply_to_message.from_user.id
        else:
            return await message.reply_text(
                "·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä's ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ú…¥ ô·¥Ä…¥ !"
            )
        await message.chat.unban_member(user)
        umention = (await app.get_users(user)).mention
        await message.reply_text(f"·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö ! {umention}")
    except AttributeError:
        pass
    except ChatWriteForbidden:
        pass
    except ChatAdminRequired:
        await message.reply_text(
            "…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !\n\n**·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥** : `can_restrict_members`"
        )


@app.on_message(filters.command(["del", "delete"]) & ~filters.private)
@adminsOnly("can_delete_messages")
async def deleteFunc(_, message: Message):
    try:
        if not message.reply_to_message:
            return await message.reply_text(" Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á …™·¥õ !")
        await message.reply_to_message.delete()
        await message.delete()
    except AttributeError:
        pass
    except ChatWriteForbidden:
        pass
    except ChatAdminRequired:
        await message.reply_text(
            "…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !\n\n**·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥** : `can_delete_messages`"
        )


@app.on_message(filters.command(["promote"]) & ~filters.private)
@adminsOnly("can_promote_members")
async def promoteFunc(_, message: Message):
    try:
        await message.delete()
    except:
        pass
    try:
        user_id = await extract_user(message)
        if not user_id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä !")
        bot = (await app.get_chat_member(message.chat.id, app.id)).privileges
        if user_id == app.id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥ç ès·¥á ü“ì !")
        if not bot:
            return await message.reply_text("…™'·¥ç …¥·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ !")
        if not bot.can_promote_members:
            return await message.reply_text("…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !")
        umention = (await app.get_users(user_id)).mention

        await message.chat.promote_member(
            user_id=user_id,
            privileges=ChatPrivileges(
                can_change_info=False,
                can_invite_users=bot.can_invite_users,
                can_delete_messages=bot.can_delete_messages,
                can_restrict_members=False,
                can_pin_messages=bot.can_pin_messages,
                can_promote_members=False,
                can_manage_chat=bot.can_manage_chat,
                can_manage_video_chats=bot.can_manage_video_chats,
            ),
        )
        await message.reply_text(f"·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á·¥Ö ! {umention}")
    except AttributeError:
        pass
    except ChatAdminRequired:
        return await message.reply_text("…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !")


@app.on_message(filters.command(["fullpromote", "fpromote"]) & ~filters.private)
@ownerOnly("can_restrict_members")
@adminsOnly("can_promote_members")
async def promoteFunc(_, message: Message):
    try:
        await message.delete()
    except:
        pass
    try:
        user_id = await extract_user(message)
        if not user_id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä !")
        bot = (await app.get_chat_member(message.chat.id, app.id)).privileges
        if user_id == app.id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥ç ès·¥á ü“ì !")
        if not bot:
            return await message.reply_text("…™'·¥ç …¥·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ !")
        if not bot.can_promote_members:
            return await message.reply_text("I ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á “ì·¥ú ü ü ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !")
        umention = (await app.get_users(user_id)).mention

        await message.chat.promote_member(
            user_id=user_id,
            privileges=ChatPrivileges(
                can_change_info=bot.can_change_info,
                can_invite_users=bot.can_invite_users,
                can_delete_messages=bot.can_delete_messages,
                can_restrict_members=bot.can_restrict_members,
                can_pin_messages=bot.can_pin_messages,
                can_promote_members=bot.can_promote_members,
                can_manage_chat=bot.can_manage_chat,
                can_manage_video_chats=bot.can_manage_video_chats,
            ),
        )
        await message.reply_text(f"“ì·¥ú ü ü è ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á·¥Ö ! {umention}")
    except AttributeError:
        pass
    except ChatAdminRequired:
        return await message.reply_text("…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á “ì·¥ú ü ü ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !")


@app.on_message(filters.command("demote") & ~filters.private)
@adminsOnly("can_promote_members")
async def demote(_, message: Message):
    try:
        await message.delete()
    except:
        pass
    try:
        user_id = await extract_user(message)
        if not user_id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä !")
        if user_id == app.id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥Ö·¥á·¥ç·¥è·¥õ·¥á ·¥ç ès·¥á ü“ì !")
        await message.chat.promote_member(
            user_id=user_id,
            privileges=ChatPrivileges(
                can_change_info=False,
                can_invite_users=False,
                can_delete_messages=False,
                can_restrict_members=False,
                can_pin_messages=False,
                can_promote_members=False,
                can_manage_chat=False,
                can_manage_video_chats=False,
            ),
        )
        umention = (await app.get_users(user_id)).mention
        await message.reply_text(f"·¥Ö·¥á·¥ç·¥è·¥õ·¥á·¥Ö ! {umention}")
    except AttributeError:
        pass
    except ChatAdminRequired:
        return await message.reply_text(
            "…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !\n\n**·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥** : `can_promote_members`"
        )


@app.on_message(filters.command(["pin", "unpin"]) & ~filters.private)
@adminsOnly("can_pin_messages")
async def pin(_, message: Message):
    try:
        await message.delete()
    except:
        pass
    try:
        if not message.reply_to_message:
            return await message.reply_text(" Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ò…™…¥/·¥ú…¥·¥ò…™…¥ …™·¥õ !")
        r = message.reply_to_message
        if message.command[0][0] == "u":
            await r.unpin()
            return await message.reply_text(
                f"**·¥ú…¥·¥ò…™…¥…¥·¥á·¥Ö [·¥õ ú…™s]({r.link}) ·¥ç·¥áss·¥Ä…¢·¥á !**",
                disable_web_page_preview=True,
            )
        await r.pin(disable_notification=True)
        await message.reply(
            f"**·¥ò…™…¥…¥·¥á·¥Ö [·¥õ ú…™s]({r.link}) ·¥ç·¥áss·¥Ä…¢·¥á !**", disable_web_page_preview=True
        )
        msg = "·¥ò ü·¥á·¥Äs·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á: ~ " + f"[·¥Ñ ú·¥á·¥Ñ·¥ã, {r.link}]"
        filter_ = dict(type="text", data=msg)
        await save_filter(message.chat.id, "~pinned", filter_)
    except AttributeError:
        pass
    except ChatWriteForbidden:
        pass
    except ChatAdminRequired:
        await message.reply_text(
            "…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !\n\n**·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥** : `can_pin_messages`"
        )


@app.on_message(filters.command(["mute", "tmute"]) & ~filters.private)
@adminsOnly("can_restrict_members")
async def mute(_, message: Message):
    try:
        await message.delete()
    except:
        pass
    try:
        user_id, reason = await extract_user_and_reason(message)
        if not user_id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä !")
        if user_id == app.id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ç·¥ú·¥õ·¥á ·¥ç ès·¥á ü“ì !")
        if user_id in SUDOERS:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ç·¥ú·¥õ·¥á ·¥ç è ·¥è·¥°…¥·¥á Ä !")
        if user_id in (await list_admins(message.chat.id)):
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ç·¥ú·¥õ·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ !")
        mention = (await app.get_users(user_id)).mention
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton(text="·¥ú…¥·¥ç·¥ú·¥õ·¥á", callback_data=f"unmute_{user_id}")]]
        )
        msg = (
            f"**·¥ç·¥ú·¥õ·¥á·¥Ö ·¥ús·¥á Ä:** {mention}\n"
            f"**·¥ç·¥ú·¥õ·¥á·¥Ö  ô è:** {message.from_user.mention if message.from_user else '·¥Ä…¥·¥è…¥'}\n"
        )
        if message.command[0] == "tmute":
            split = reason.split(None, 1)
            time_value = split[0]
            temp_reason = split[1] if len(split) > 1 else ""
            temp_mute = await time_converter(message, time_value)
            msg += f"**·¥ç·¥ú·¥õ·¥á·¥Ö “ì·¥è Ä:** {time_value}\n"
            if temp_reason:
                msg += f"** Ä·¥á·¥Äs·¥è…¥:** {temp_reason}"
            try:
                if len(time_value[:-1]) < 3:
                    await message.chat.restrict_member(
                        user_id,
                        permissions=ChatPermissions(),
                        until_date=temp_mute,
                    )
                    await message.reply_animation("https://fonts.gstatic.com/s/e/notoemoji/latest/1f92b/512.gif")
                    await message.reply_text(msg, reply_markup=keyboard)
                else:
                    await message.reply_text(" è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥ç·¥è Ä·¥á ·¥õ ú·¥Ä…¥ 99 !")
            except AttributeError:
                pass
            return
        if reason:
            msg += f"** Ä·¥á·¥Äs·¥è…¥:** {reason}"
        await message.chat.restrict_member(user_id, permissions=ChatPermissions())
        await message.reply_text(msg, reply_markup=keyboard)
    except AttributeError:
        pass
    except ChatWriteForbidden:
        pass
    except ChatAdminRequired:
        await message.reply_text(
            "…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !\n\n**·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥** : `can_restrict_members`"
        )


@app.on_message(filters.command("unmute") & ~filters.private)
@adminsOnly("can_restrict_members")
async def unmute(_, message: Message):
    try:
        await message.delete()
    except:
        pass
    try:
        user_id = await extract_user(message)
        if not user_id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä !")
        await message.chat.unban_member(user_id)
        umention = (await app.get_users(user_id)).mention
        await message.reply_text(f"·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö ! {umention}")
    except AttributeError:
        pass
    except ChatWriteForbidden:
        pass
    except ChatAdminRequired:
        await message.reply_text(
            "…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !\n\n**·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥** : `can_restrict_members`"
        )


@app.on_message(filters.command("ban_ghosts") & ~filters.private)
@adminsOnly("can_restrict_members")
async def ban_deleted_accounts(_, message: Message):
    try:
        await message.delete()
    except:
        pass
    try:
        chat_id = message.chat.id
        deleted_users = []
        banned_users = 0
        m = await message.reply("“ì…™…¥·¥Ö…™…¥…¢ …¢ ú·¥ès·¥õs !")
        async for i in app.get_chat_members(chat_id):
            if i.user.is_deleted:
                deleted_users.append(i.user.id)
        if len(deleted_users) > 0:
            for deleted_user in deleted_users:
                try:
                    await message.chat.ban_member(deleted_user)
                except Exception:
                    pass
                banned_users += 1
            await m.edit(f" ô·¥Ä…¥…¥·¥á·¥Ö {banned_users} ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs !")
        else:
            await m.edit("·¥õ ú·¥á Ä·¥á ·¥Ä Ä·¥á …¥·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs …™…¥ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ !")
    except AttributeError:
        pass
    except ChatWriteForbidden:
        pass
    except ChatAdminRequired:
        await message.reply_text(
            "…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !\n\n**·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥** : `can_restrict_members`"
        )


@app.on_message(filters.command(["warn", "dwarn"]) & ~filters.private)
@adminsOnly("can_restrict_members")
async def warn_user(_, message: Message):
    try:
        await message.delete()
    except:
        pass
    try:
        user_id, reason = await extract_user_and_reason(message)
        chat_id = message.chat.id
        if not user_id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä !")
        if user_id == app.id:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥°·¥Ä Ä…¥ ·¥ç ès·¥á ü“ì !")
        if user_id in SUDOERS:
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥°·¥Ä Ä…¥ ·¥ç è ·¥è·¥°…¥·¥á Ä !")
        if user_id in (await list_admins(chat_id)):
            return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥°·¥Ä Ä…¥ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ !")
        user, warns = await asyncio.gather(
            app.get_users(user_id), get_warn(chat_id, await int_to_alpha(user_id))
        )
        mention = user.mention
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text=" Ä·¥á·¥ç·¥è·¥†·¥á ·¥°·¥Ä Ä…¥", callback_data=f"unwarn_{user_id}"
                    )
                ]
            ]
        )
        if warns:
            warns = warns["warns"]
        else:
            warns = 0
        if message.command[0][0] == "d":
            await message.reply_to_message.delete()
        if warns >= 2:
            await message.chat.ban_member(user_id)
            await message.reply_text(
                f"…¥·¥ú·¥ç ô·¥á Ä ·¥è“ì ·¥°·¥Ä Ä…¥s ·¥è“ì {mention} ·¥áx·¥Ñ·¥á·¥á·¥Ö·¥á·¥Ö !\n ô·¥Ä…¥…¥·¥á·¥Ö !"
            )
            await remove_warns(chat_id, await int_to_alpha(user_id))
        else:
            warn = {"warns": warns + 1}
            msg = f"""
**·¥°·¥Ä Ä…¥·¥á·¥Ö ·¥ús·¥á Ä:** {mention}
**·¥°·¥Ä Ä…¥·¥á·¥Ö  ô è:** {message.from_user.mention if message.from_user else '·¥Ä…¥·¥è…¥'}
** Ä·¥á·¥Äs·¥è…¥:** {reason or '…¥·¥è  Ä·¥á·¥Äs·¥è…¥ ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö'}
**·¥°·¥Ä Ä…¥s:** {warns + 1}/3
""" 
            await message.reply_animation("https://fonts.gstatic.com/s/e/notoemoji/latest/1f198/512.gif")
            await message.reply_text(msg, reply_markup=keyboard)
            await add_warn(chat_id, await int_to_alpha(user_id), warn)
    except AttributeError:
        pass
    except ChatWriteForbidden:
        pass
    except ChatAdminRequired:
        await message.reply_text(
            "…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !\n\n**·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥** : `can_restrict_members`"
        )


@app.on_message(filters.command(["rmwarns", "removewarn"]) & ~filters.private)
@adminsOnly("can_restrict_members")
async def remove_warnings(_, message: Message):
    try:
        await message.delete()
    except:
        pass
    try:
        if not message.reply_to_message:
            return await message.reply_text(
                " Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ·¥ús·¥á Ä's ·¥°·¥Ä Ä…¥…™…¥…¢ !"
            )
        user_id = message.reply_to_message.from_user.id
        mention = message.reply_to_message.from_user.mention
        chat_id = message.chat.id
        warns = await get_warn(chat_id, await int_to_alpha(user_id))
        if warns:
            warns = warns["warns"]
        if warns == 0 or not warns:
            await message.reply_text(f"{mention}  ú·¥Ä·¥†·¥á …¥·¥è ·¥°·¥Ä Ä…¥…™…¥…¢'s !")
        else:
            await remove_warns(chat_id, await int_to_alpha(user_id))
            await message.reply_text(f" Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ·¥°·¥Ä Ä…¥…™…¥…¢'s ·¥è“ì {mention} !")
    except AttributeError:
        pass
    except ChatWriteForbidden:
        pass
    except ChatAdminRequired:
        await message.reply_text(
            "…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s !\n\n**·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥** : `can_restrict_members`"
        )


@app.on_message(filters.command("warns") & ~filters.private)
async def check_warns(_, message: Message):
    try:
        await message.delete()
    except:
        pass
    user_id = await extract_user(message)
    if not user_id:
        return await message.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä !")
    warns = await get_warn(message.chat.id, await int_to_alpha(user_id))
    mention = (await app.get_users(user_id)).mention
    if warns:
        warns = warns["warns"]
        return await message.reply_text(f"{mention}  ú·¥Äs {warns}/3 ·¥°·¥Ä Ä…¥…™…¥…¢'s !")
    else:
        return await message.reply_text(f"{mention}  ú·¥Äs …¥·¥è ·¥°·¥Ä Ä…¥…™…¥…¢'s !")


@app.on_callback_query(filters.regex("unwarn_"))
async def remove_warning(_, cq: CallbackQuery):
    from_user = cq.from_user
    chat_id = cq.message.chat.id
    permissions = await member_permissions(chat_id, from_user.id)
    permission = "can_restrict_members"
    if permission not in permissions:
        return await cq.answer(
            " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥ !",
            show_alert=True,
        )
    user_id = cq.data.split("_")[1]
    warns = await get_warn(chat_id, await int_to_alpha(user_id))
    if warns:
        warns = warns["warns"]
    if not warns or warns == 0:
        return await cq.answer("·¥ús·¥á Ä  ú·¥Äs …¥·¥è ·¥°·¥Ä Ä…¥…™…¥…¢'s !")
    warn = {"warns": warns - 1}
    await add_warn(chat_id, await int_to_alpha(user_id), warn)
    text = cq.message.text.markdown
    text = f"~~{text}~~\n\n"
    text += f"__·¥°·¥Ä Ä…¥  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö  ô è {from_user.mention}__"
    await cq.message.edit(text)


@app.on_callback_query(filters.regex("unmute_"))
async def remove_warning(_, cq: CallbackQuery):
    from_user = cq.from_user
    chat_id = cq.message.chat.id
    permissions = await member_permissions(chat_id, from_user.id)
    permission = "can_restrict_members"
    if permission not in permissions:
        return await cq.answer(
            " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥ !",
            show_alert=True,
        )
    user_id = cq.data.split("_")[1]
    await cq.message.chat.unban_member(user_id)
    text = cq.message.text.markdown
    text = f"~~{text}~~\n\n"
    text += f"__·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö  ô è {from_user.mention}__"
    await cq.message.edit(text)
